plugins {
	id "fabric-loom"
}

repositories {
	mavenLocal()
	maven { url "https://maven.vram.io" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.fabricmc.net/" }
	//maven { url "https://maven.dblsaiko.net/" }
	maven { url "https://server.bbkr.space/artifactory/libs-release/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	//mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	mappings loom.officialMojangMappings()
	
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("io.vram:canvas-fabric-mc118:${project.canvas_version}") {
		exclude module: "modmenu"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching(["fabric.mod.json", "pack.mcmeta"]) {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

task shaderpack(type: Zip) {
	//outputs.upToDateWhen { false }
	archiveFileName = "${archiveBaseName.get()}-${archiveVersion.get()}.zip"
	destinationDirectory = jar.destinationDirectory
	from sourceSets.main.resources
	exclude "fabric.mod.json"

	filesMatching("pack.mcmeta") {
		expand "version": project.version
	}
}

build.dependsOn shaderpack