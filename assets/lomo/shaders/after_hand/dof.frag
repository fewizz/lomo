#include lomo:shaders/lib/linear.glsl
#include frex:shaders/lib/math.glsl
#include canvas:shaders/pipeline/pipeline.glsl

uniform sampler2D u_color;
uniform sampler2D u_depth;

layout(location = 0) out vec3 out_color;

const int steps = 16;

vec2[steps] positions = vec2[steps](
	vec2(0.0, 0.0),
	vec2(0.45155564254657965, -0.03017467505069315),
	vec2(0.12198114664569583, 0.4660958518030005),
	vec2(-0.2540802678690903, -0.4271151489018215),
	vec2(-0.5082727949036007, 0.051563060356078806),
	vec2(0.19767560234451562, -0.47832565550123013),
	vec2(-0.34628204071358504, 0.4924769814454519),
	vec2(0.5814960793676434, 0.47045439538672074),
	vec2(-0.7106781925499065, -0.42074521162819145),
	vec2(0.7053171620878812, -0.48129857432490886),
	vec2(0.9064883723374269, 0.05279688894107594),
	vec2(-0.18180454330987472, 0.9302930180121719),
	vec2(0.36182626789974554, -0.8898355145773604),
	vec2(-0.9705384041463976, 0.1252040107855789),
	vec2(-0.8016074589017398, 0.5699335224337542),
	vec2(-0.11571062111632413, -0.9872730869865174)
);

/*vec2[steps] positions = vec2[steps](
	vec2(0.0, 0.0),
	vec2(-0.04461397106361992, -0.20375557782035714),
	vec2(-0.195818345254825, 0.1260930474878112),
	vec2(0.14108506502211715, 0.2098335127120226),
	vec2(0.3173261037128937, -0.05200611597120524),
	vec2(0.20606491791933135, -0.2602756772839187),
	vec2(-0.3437955275053067, -0.08419746966645712),
	vec2(-0.04711186113617982, 0.35713727226723097),
	vec2(-0.2497484760476358, -0.3144414014146567),
	vec2(0.3925294511178263, 0.16535074767758132),
	vec2(0.0025799305034094533, -0.43872693695617004),
	vec2(-0.30117357608019135, 0.3867764084109192),
	vec2(-0.45235205941147083, 0.18989922905991807),
	vec2(0.27906624912194256, 0.42667463175281645),
	vec2(-0.56307316919145, -0.027102022988027934),
	vec2(0.38642997338572616, -0.413099624050631),
	vec2(0.52551725689863, -0.23427206927281458),
	vec2(-0.48025505045479827, -0.3322486110192694),
	vec2(0.10067007584040358, 0.5909029514603185),
	vec2(-0.14252495033436305, 0.5886039184648361),
	vec2(0.618486084230166, 0.02834399880601828),
	vec2(-0.2998362167737873, -0.5532316419242909),
	vec2(0.23844056817906065, -0.5922427825018531),
	vec2(0.5395898907371297, 0.349995742530387),
	vec2(-0.029991442134782786, -0.6595876004672417),
	vec2(-0.5328010986462448, 0.4524827517196246),
	vec2(-0.6909501425460509, 0.3020203257345845),
	vec2(0.46826560163752795, 0.5937653829482439),
	vec2(-0.6848928583132737, -0.32461984457678855),
	vec2(-0.3558783244078157, 0.674925675382282),
	vec2(0.742755730457454, -0.17486111007347102),
	vec2(-0.7656437032108779, 0.021345422083698416),
	vec2(0.7384277906567386, 0.2319614826493691),
	vec2(0.5081626144953001, -0.5953549465700388),
	vec2(-0.5388557787187915, -0.5689620570519928),
	vec2(0.2955688654429649, 0.7397985056956612),
	vec2(-0.23857508885728015, -0.7626795968316471),
	vec2(0.17758751774369505, -0.7958310953561473),
	vec2(-0.15526922131330076, 0.8186189937522532),
	vec2(0.06115599571582043, 0.841066063641488),
	vec2(-0.8295706293114716, -0.17294984220849105),
	vec2(0.6953755018482132, 0.5315966896108391),
	vec2(0.7761148281466813, -0.4100630851261064),
	vec2(-0.8651263033413245, 0.20634111271267447),
	vec2(-0.5679662576065648, 0.6852770518288389),
	vec2(-0.04717287771452851, -0.9215454588881157),
	vec2(0.9254516359419349, 0.09256896658519273),
	vec2(0.7253725220358994, -0.5852543484928546),
	vec2(-0.7554832623853176, 0.5677105175655224),
	vec2(-0.5444061167257871, -0.7785408444209766),
	vec2(0.9485311893840168, -0.10217418931022228),
	vec2(0.35863563616211336, -0.8857581432287703),
	vec2(-0.847216453812877, -0.46679104302801233),
	vec2(-0.7290535187459992, -0.6382288954272145),
	vec2(0.5342321131251286, -0.8119990201737738),
	vec2(0.8675348531408558, 0.449330127919567),
	vec2(0.555682337317465, 0.8100032049486096),
	vec2(-0.8907077041303325, 0.4170695259101261),
	vec2(-0.4013768653687433, -0.9003551862621985),
	vec2(0.19502440069462357, 0.971599621474832),
	vec2(0.1341715562829173, -0.9841106159894076),
	vec2(0.9413024987919343, -0.32183204765490514),
	vec2(-0.31366657760503736, 0.9446547213512154),
	vec2(-0.9967786811599448, -0.06287610219448542)
);*/

void main() {
	#define DOF
	#ifdef DOF
	float depth0 = texelFetch(u_depth, ivec2(gl_FragCoord.xy), 0).x;
	vec3 pos = vec3(gl_FragCoord.xy, depth0);
	//vec3 pos_cam0 = win_to_cam(pos);

	vec3 ndc_near = vec3(gl_FragCoord.xy, 0.0) / vec3(frx_viewWidth, frx_viewHeight, 1.0) * 2.0 - 1.0;
	vec3 ndc_far  = vec3(gl_FragCoord.xy, 1.0) / vec3(frx_viewWidth, frx_viewHeight, 1.0) * 2.0 - 1.0;

	vec4 near0 = frx_inverseProjectionMatrix * vec4(ndc_near, 1.0);
	vec4 far0  = frx_inverseProjectionMatrix * vec4(ndc_far, 1.0);
	vec3 near = near0.xyz / near0.w;
	vec3 far  = far0.xyz  / far0.w;

	vec3 dir = normalize(far - near);

	float center_depth = textureLod(u_depth, vec2(0.5), 4).x;

	vec3 color = vec3(0.0);
	float weight_sum = 0.0;

	const float radius = 2.0;

	for(int stp = 0; stp < steps; ++stp) {
		vec2 off = positions[stp] * radius;
		ivec2 ipos = ivec2(gl_FragCoord.xy + off);
		float depth = texelFetch(u_depth, ipos, 0).x;
		vec3 color0 = texelFetch(u_color, ipos, 0).rgb;

		vec3 pos = vec3(gl_FragCoord.xy + off, depth);
		vec3 pos_cam = win_to_cam(pos);
		vec3 near_cam = win_to_cam(vec3(pos.xy, 0.0));
		vec3 mid_cam = win_to_cam(vec3(pos.xy, center_depth));

		float dist_to_mid_z = distance(pos_cam, mid_cam);

		float radius0 =
			min(
				dist_to_mid_z / distance(near_cam, pos_cam) * 0.5,
				radius
			);

		float weight =
			clamp(radius0 + 0.5 - length(off), 0.0, 1.0) *
			float(all(greaterThanEqual(ipos, ivec2(0)))) *
			float(all(lessThan(ipos, ivec2(frxu_size.xy))));

		color += color0 * weight;
		weight_sum += weight;
	}

	color /= weight_sum;

	out_color = vec3(color);
	#else
	out_color = texelFetch(u_color, ivec2(gl_FragCoord.xy), 0).rgb;
	#endif
}